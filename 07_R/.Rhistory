geom_col(fill=title)
movie_review100page %>%
group_by(title) %>%
summarise(point_mean=mean(point),
point_sum=sum(point)) %>%
arrange(-point_mean) %>%
ggplot(aes(x=title,y=point_mean,fill=title))+
geom_col()
#영화 리뷰 내용만 뽑아 최빈단어 10개 워드 크라우드 시각화.
reviewtxt<-movie_review100page$review
reviewtxt<-str_replace_all(reviewtxt,'[ㄱ-ㅎ]',' ')
reviewtxtnouns<-extractNoun(reviewtxt)
reviewwordcount<-table(unlist(reviewtxtnouns))
reviewwordcount
rw_wordcount<-as.data.frame(reviewwordcount,stringsAsFactors=FALSE)
rw_wordcount
#이름바꾸기
rw_wordcount<-rename(rw_wordcount,word=Var1,freq=Freq)
rw_wordcount %>%
arrange(desc(freq)) %>%
head(10) %>%
ggplot(aes(x=freq,y=reorder(word,freq)))+
geom_col()
#워드 클라우드
set.seed(1234)
pal<-brewer.pal(9,'Blues')[5:9]
wordcloud(words=rw_wordcount$word,
freq=rw_wordcount$freq,
min.freq=5,
max.words=200,
random.order=F,
rot.per=0.1,
scale=c(3,0.3),
colors=pal)
wordcloud(words=rw_wordcount$word,
freq=rw_wordcount$freq,
min.freq=5,
max.words=200,
random.order=F,
rot.per=0.1,
scale=c(2,0.3),
colors=pal)
wordcloud(words=rw_wordcount$word,
freq=rw_wordcount$freq,
min.freq=5,
max.words=200,
random.order=F,
rot.per=0.1,
scale=c(2,0.5),
colors=pal)
wordcloud(words=rw_wordcount$word,
freq=rw_wordcount$freq,
min.freq=5,
max.words=200,
random.order=F,
rot.per=0.1,
scale=c(2),
colors=pal)
wordcloud(words=rw_wordcount$word,
freq=rw_wordcount$freq,
min.freq=5,
max.words=200,
random.order=F,
rot.per=0.1,
scale=c(2,0),
colors=pal)
#최빈단어뽑기
top20<-rw_wordcount[order(rw_wordcount$freq,decreasing=T),][1:20,]
wordcloud(words=rw_wordcount20$word,
freq=rw_wordcount20$freq,
min.freq=5,
max.words=200,
random.order=F,
rot.per=0.1,
scale=c(2,0),
colors=pal)
#최빈단어뽑기
rw_wordcount20<-rw_wordcount[order(rw_wordcount$freq,decreasing=T),][1:20,]
wordcloud(words=rw_wordcount20$word,
freq=rw_wordcount20$freq,
min.freq=5,
max.words=200,
random.order=F,
rot.per=0.1,
scale=c(2,0),
colors=pal)
wordcloud(words=rw_wordcount$word,
freq=rw_wordcount$freq,
min.freq=5,
max.words=200,
random.order=F,
rot.per=0.1,
scale=c(2,0),
colors=pal)
wordcloud(words=rw_wordcount20$word,
freq=rw_wordcount20$freq,
min.freq=5,
max.words=200,
random.order=F,
rot.per=0.1,
scale=c(2,0),
colors=pal)
wordcloud(words=rw_wordcount$word,
freq=rw_wordcount$freq,
min.freq=5,
max.words=200,
random.order=F,
rot.per=0.1,
scale=c(2,0),
colors=pal)
?rvest
#필요한 패키지 다운로드, 로드
install.packages("RSelenium")
library(httr)
library(rvest)
library(Rselenium)
library(RSelenium)
###셀레니움 동적 웹크롤링 준비 끝
remDr<- remoteDriver(port=4445L, #포트번호
browserName='chrome' #사용할 브라우저
)
#사용할 브라우저
remDr$open()
remDr$navigate('https//:www.youtube.com')
#사용할 브라우저
remDr$open()
remDr$navigate('https//:www.youtube.com')
remDr$navigate('https://www.youtube.com')
html<-read_html(html)
#입력할 창의 태그를 SelectorGadget로 찾아내고.
#현재 페이지의 HTML소스 가져오기.
html<-remDr$getPageSource()[[1]]
html<-read_html(html)
html
welElem<-remDr$findElement(using='css',
'#search')
welElem$sendKeysToElement(list('과학 다큐 비욘드'))
welElem$sendKeysToElement(list('과학 다큐 비욘드',key='enter'))
welElem$sendKeysToElement(list('과학 다큐 비욘드',key='enter'))
#입력할 창의 태그를 SelectorGadget로 찾아내고.
#현재 페이지의 HTML소스 가져오기.
html<-remDr$getPageSource()[[1]]
html<-read_html(html)
# '#video-title' css안의 txt 가져오기
youtube_title<-html %>%
html_nodes('#vedeo-title') %>%
html_text()
# '#video-title' css안의 txt 가져오기
youtube_title<-html %>%
html_nodes('#video-title') %>%
html_text()
youtube_title
youtube_title[1:5]
welElem$sendKeysToElement(list('과학 다큐 비욘드',key='enter'))
#입력할 창의 태그를 SelectorGadget로 찾아내고.
#현재 페이지의 HTML소스 가져오기.
html<-remDr$getPageSource()[[1]]
html<-read_html(html)
# '#video-title' css안의 txt 가져오기
youtube_title<-html %>%
html_nodes('#video-title') %>%
html_text()
youtube_title[1:5]
youtube_title<-gsub('\n','',youtube_title)
youtube_title[1:5]
youtube_title<-trimws(youtube_title)
youtube_title[1:5]
youtube_title_url<-html %>% html_nodes('#video-title') %>%
html_attr('href')
youtube_title_url
youtube_title_url[1:10]
#youtube_title만 text파일로 out
write.table(youtube_title,
file='outData/과학다큐결과.txt',
sep=',',
row.names=F,
quoto=F)
youtube_title_url[1:10]
youtube_title_url<-
ifelse(is.na(youtube_title_url),'',
paste0('https://www.youtube.com',youtube_title_url))
#youtube_title만 text파일로 out
write.table(youtube_title,
file='outData/과학다큐결과.txt',
sep=',',
row.names=F,
quoto=F)
#youtube_title만 text파일로 out
write.table(youtube_title,
file='outData/과학다큐결과.txt',
sep=',',
row.names=FALSE,
quoto=FALSE)
#youtube_title만 text파일로 out
write.table(youtube_title,
file='outData/과학다큐결과.txt',
sep=',',
row.names=FALSE,
quoto=FALSE)
youtube_title_url[1:10]
youtube_title_url<-
ifelse(is.na(youtube_title_url),'',
paste0('https://www.youtube.com',youtube_title_url))
youtube_title_url[1:10]
youtube_title_url<-
ifelse(is.na(youtube_title_url),'',
paste0('https://www.youtube.com',youtube_title_url))
youtube_title_url[1:10]
youtube_title_url<-html %>% html_nodes('#video-title') %>%
html_attr('href')
youtube_title_url[1:10]
youtube_title_url<-html %>% html_nodes('#video_title') %>%
html_attr('href')
youtube_title_url[1:10]
youtube_title_url<-
ifelse(is.na(youtube_title_url),'',
paste0('https://www.youtube.com',youtube_title_url))
youtube_title<-gsub('\n','',youtube_title)
youtube_title<-trimws(youtube_title)
youtube_title[1:5]
youtube_title_url<-html %>% html_nodes('#video_title') %>%
html_attr('href')
youtube_title_url[1:10]
youtube_title_url<-html %>% html_nodes('#video-title') %>%
html_attr('href')
youtube_title<-gsub('\n','',youtube_title)
youtube_title<-trimws(youtube_title)
youtube_title[1:5]
welElem<-remDr$findElement(using='css',
'#search')
welElem$sendKeysToElement(list('과학 다큐 비욘드',key='enter'))
#입력할 창의 태그를 SelectorGadget로 찾아내고.
#현재 페이지의 HTML소스 가져오기.
html<-remDr$getPageSource()[[1]]
html<-read_html(html)
# '#video-title' css안의 txt 가져오기
youtube_title<-html %>%
html_nodes('#video-title') %>%
html_text()
youtube_title[1:5]
remDr$navigate('https://www.youtube.com') #어느 사이트로 가라
welElem<-remDr$findElement(using='css',
'#search')
welElem$sendKeysToElement(list('과학 다큐 비욘드',key='enter'))
#입력할 창의 태그를 SelectorGadget로 찾아내고.
#현재 페이지의 HTML소스 가져오기.
html<-remDr$getPageSource()[[1]]
html<-read_html(html)
# '#video-title' css안의 txt 가져오기
youtube_title<-html %>%
html_nodes('#video-title') %>%
html_text()
youtube_title[1:5]
youtube_title<-gsub('\n','',youtube_title)
youtube_title<-trimws(youtube_title)
youtube_title[1:5]
youtube_title_url<-html %>% html_nodes('#video-title') %>%
html_attr('href')
youtube_title_url[1:10]
youtube_title_url<-
ifelse(is.na(youtube_title_url),'',
paste0('https://www.youtube.com',youtube_title_url))
#youtube_title만 text파일로 out
write.table(youtube_title,
file='outData/과학다큐결과.txt',
sep=',',
row.names=FALSE,
quoto=FALSE)
#youtube_title만 text파일로 out
write.table(youtube_title,
file='outData/과학다큐결과.txt',
sep=',',
row.names=FALSE,
quato=FALSE)
#youtube_title만 text파일로 out
write.table(youtube_title,
file='outData/과학다큐결과.txt',
sep=',',
row.names=FALSE,
quote=FALSE)
#예제 2. 마우스 스크롤 다운한 후 크롤링(댓글)
remD<-remoteDriver(port=4445L,
browserName='chrome')
remD$open()
remD$navigate("https://youtu.be/tZooW6PritE")
remD$navigate("https://youtu.be/tZooW6PritE")
remD$navigate("https://youtu.be/tZooW6PritE")
btn<-remD$findElement(using='css_selector',
value='.html5-main-video')
btn<-remD$findElement(using='css selector',
value='.html5-main-video')
btn$clickEmelent() # 메인 동영상 플레이 멈춤
remD$navigate("https://youtu.be/tZooW6PritE")
btn<-remD$findElement(using='css selector',
value='.html5-main-video')
btn$clickEmelent() # 메인 동영상 플레이 멈춤
btn$clickElement() # 메인 동영상 플레이 멈춤
#마우스 스트롤 다운
remD$executeScript("window.scrollTo(0,500)")
#마우스 스트롤 다운
remD$executeScript("window.scrollTo(0,500)")
#마우스 스트롤 다운
remD$executeScript("window.scrollTo(0,500)")
remD$executeScript("window.scrollTo(0,1000)")
remD$executeScript("window.scrollTo(0,1000)")
remD$executeScript("window.scrollTo(0,2000)")
remD$executeScript("window.scrollTo(0,8000)")
remD$executeScript("window.scrollTo(0,8000)")
remD$executeScript("window.scrollTo(0,8000)")
remD$executeScript("window.scrollTo(0,8000)")
remD$executeScript("window.scrollTo(0,8000)")
remD$executeScript("window.scrollTo(0,8000)")
#마우스 스트롤 다운
remD$executeScript("window.scrollTo(0,500)")
remD$executeScript("window.scrollTo(1000,1500)")
remD$executeScript("window.scrollTo(1000,3000)")
#현재 페이지의 html 소스 가져오기
html<-remD$getPageSource()[[1]]
html<-read_html(html)
remD$executeScript("window.scrollTo(1000,6000)")
remD$executeScript("window.scrollTo(1000,6000)")
remD$executeScript("window.scrollTo(1000,6000)")
remD$executeScript("window.scrollTo(1000,6000)")
remD$executeScript("window.scrollTo(1000,1500)")
#현재 페이지의 html 소스 가져오기
html<-remD$getPageSource()[[1]]
remD$executeScript("window.scrollTo(1000,6000)")
comments[1:10]
comments<-html %>%
html_nodes('content-text') %>% html_text()
comments[1:10]
comments<-html %>%
html_nodes('#content-text') %>% html_text()
comments[1:10]
#현재 페이지의 html 소스 가져오기
html<-remD$getPageSource()[[1]]
html<-read_html(html)
comments[1:10]
comments<-html %>%
html_nodes('#content-text') %>% html_text()
comments<-html %>%
html_nodes('#content-text') %>% html_text()
comments<-html %>%
html_nodes('#content-text') %>% html_text()
comments[1:10]
write.table(comments,
file="outData/댓글.txt",
sep=',',
quote=F)
write.table(comments,
file="outData/댓글.txt",
sep=',',
row.names=F
quote=F)
write.table(comments,
file="outData/댓글.txt",
sep=',',
row.names=F,
quote=F)
nnames<-html %>%
html_nodes('.ytd-comment-renderer') %>% html_text()
nnames[1:10]
nnames<-gsub('\n','',nnames)
nnames<-trimws(nnames)
nnames[1:10]
nnames<-html %>%
html_nodes('#author-text') %>% html_text()
nnames<-gsub('\n','',nnames)
nnames<-trimws(nnames)
nnames[1:10]
write.csv(result,
file='outData/과학다큐결과.csv')
#csv파일로 내보내기
result<-cbind(youtube_title,youtube_title_url)
write.csv(result,
file='outData/과학다큐결과.csv')
#(1) 패키지 준비
install.packages("ggirahExtra") #지도시각화를 위한 패키지
library(ggiraphExtra)
install.packages("mapproj") #ggChoropleth함수 사용을 위한 패키지
library(mapproj)
library(ggiraphExtra)
#(1) 패키지 준비
install.packages("ggirahExtra") #지도시각화를 위한 패키지
library(mapproj)
library(ggplot2)
library(tibble)
library(ggiraphExtra)
#(1) 패키지 준비
install.packages("ggirahExtra") #지도시각화를 위한 패키지
#(1) 패키지 준비
install.packages("ggiraphExtra") #지도시각화를 위한 패키지
library(ggiraphExtra)
#(2) 행이름을 변수로
head(USArrests,1)
rownames_to_column(USArrests,var="state")
#(2) 행이름을 변수로
head(USArrests,1)
crime<-rownames_to_column(USArrests,var="state")
head(crime,1)
class(crime)
class(crime)
head(crime,3)
#(3) 미국 지도 주 정보 가져오기
map_data("state")
view(map_data("state"))
#(4) 지도 시각화
ggChoropleth(data=crime, #지도에 표현할 데이터
aes(fill=Murder, map_id=state),
map=state_map)
#(4) 지도 시각화
ggChoropleth(data=crime, #지도에 표현할 데이터
aes(fill=Murder, #지도에 채워질 변수
map_id=state), #지역 변수
map=state_map,  #위도경도 지도 데이터
interactive=T) #인터렉티브.
#(3) 미국 지도 주 정보 가져오기
state_map<-map_data("state")
#(4) 지도 시각화
ggChoropleth(data=crime, #지도에 표현할 데이터
aes(fill=Murder, #지도에 채워질 변수
map_id=state), #지역 변수
map=state_map,  #위도경도 지도 데이터
interactive=T) #인터렉티브.
#(2) 행이름을 변수로
head(USArrests,1)
crime<-rownames_to_column(USArrests,var="state")
class(crime)
head(crime,3)
crime$state<-tolower(crime$state) #주 이름을 소문자로바꾸기
#(3) 미국 지도 주 정보 가져오기
state_map<-map_data("state")
#(4) 지도 시각화
ggChoropleth(data=crime, #지도에 표현할 데이터
aes(fill=Murder, #지도에 채워질 변수
map_id=state), #지역 변수
map=state_map,  #위도경도 지도 데이터
interactive=T) #인터렉티브.
install.packages("stringi")
install.packages("stringi")
install.packages("devtools")
devtools::install_github("cardiomoon/kormaps2014")
head(korpop1)
library(kormaps2014)
head(korpop1)
library(dplyr)
str(changeCode(korpop1))
korpop1<-rename(korpop1,
pop=총인구_명,
name=행정구역별_읍면동)
str(changeCode(korpop1))
head(kormap1)
head(changecode(kormap1))
head(changeCode(kormap1))
head(changeCode(kormap1[,c('name','pop','code')]))
head(kormap1)
head(changeCode(kormap1))
head(changeCode(kormap1[,c('name','pop','code')]))
head(changeCode(kormap1))
head(changeCode(kormap1[,c('name','pop','code')]))
str(changeCode(korpop1))
head(changeCode(kormap1[,c('name','pop','code')]))
head(changeCode(kormap1))
head(changeCode(korpop1[,c('name','pop','code')]))
ggChoropleth(data=korpop1,
aes(fill=pop,
map_id=code,
tooltip=name),
map=kormap1,
interactive = T)
#
korpop1$name<-iconv(korpop1$name,'utf-8','체949')
ggChoropleth(data=korpop1,
aes(fill=pop,
map_id=code,
tooltip=name),
map=kormap1,
interactive = T)
#
korpop1$name<-iconv(korpop1$name,'utf-8','CP949')
ggChoropleth(data=korpop1,
aes(fill=pop,
map_id=code,
tooltip=name),
map=kormap1,
interactive = T)
head(changeCode(tbc))
###############################################
head(tbc)
tbc$name1<-iconv(tbc$name1,'UTF-8','cp949')
###############################################
head(tbc)
tbc$name<-iconv(tbc$name,'UTF-8','cp949')
head(tbc)
ggChoropleth(data=tbc,
aes(fill=newPts,
map_id=code,
tooltip=name1),
map=kormap1,
interactive = T)
ggChoropleth(data=tbc,
aes(fill=newPts,
map_id=code,
tooltip=name1),
map=kormap1,
interactive = T)
ggChoropleth(data=tbc,
aes(fill=NewPts,
map_id=code,
tooltip=name1),
map=kormap1,
interactive = T)
